Floating-point numbers are approximations, so using the equality operator (==) to compare them is unreliable. 
Instead, subtract the numbers and check if the absolute difference is small. For example:
# Example 4
# The variables e and f can be any floating-
# point numbers from any calculation.
e = 7.135
f = 7.128
if abs(e - f) < 0.01:
    print(f"{e} and {f} are close enough so")
    print("we'll consider them to be equal.")
else:
    print(f"{e} and {f} are not close and")
    print("therefor not equal.")

Bad practices: 
    if abs (e == f)

approx Function (pytest)
The approx function in pytest simplifies floating-point comparisons by checking if two values are close enough within a given tolerance, 
avoiding issues with direct equality (==).

Default Behavior:
approx(expected_value) allows a default tolerance of 1 millionth of expected_value.
Custom Tolerance Options:
Relative Tolerance (rel): approx(expected_value, rel=0.01) allows a 1% difference (expected_value * 0.01).
Absolute Tolerance (abs): approx(expected_value, abs=0.01) allows a fixed difference of 0.01, regardless of the value size.
Example Usage:
python
Copiar
Editar
def test_sqrt():
    assert math.sqrt(5) == approx(2.24, rel=0.01)  # Allows 1% difference
    assert math.sqrt(5) == approx(2.24, abs=0.01)  # Allows absolute difference of 0.01
rel is useful for large numbers, while abs is simpler and more intuitive.

Separating Program Code from Test Code
Why Separate Test and Program Code?

Makes it easier to release a program without test functions.
Users don’t need or want test functions.
Requires importing program functions into the test file.
How to Import Program Functions into a Test File

Use an import statement in the test file:
python

from file_name import function_1, function_2, … function_N
Issue with Importing: Unwanted Execution

When a program file is imported, all code outside functions runs immediately.
This means main() will execute, starting the program, which we don’t want during testing.
Solution: if __name__ == "__main__":

Instead of calling main() directly, wrap it in an if statement:
python

if __name__ == "__main__":
    main()
This ensures:
If the file is run directly (python program.py), main() executes.
If the file is imported
If the file is imported into a test file, main() is skipped.
Python Guarantees This Behavior

The condition __name__ == "__main__" is False when the file is imported.
It is True only when the file is executed directly.


Syntax error x Logic error
A syntax error occurs when a mistake violates the rules of the programming language, preventing the program from running. 
All syntax errors must be fixed before the program can execute. 
After addressing syntax errors, the program may still have logic errors, which cause incorrect results. 
Tools like test functions, print statements, and debuggers can be used to find and fix logic errors.